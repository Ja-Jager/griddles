// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.2.3
// LVGL version: 8.3.3
// Project name: 3d_printer

#ifndef _UI_EVENTS_H
#define _UI_EVENTS_H

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief 创建切换语言状态的队列。
*/
void ui_event_init(void);

/**
 * @brief 队列读取语言标识
 * @return 读取语言标识，e.g.中文简体："zh-cn"，详细可参考void Change_Language_From_Settings(lv_event_t *e)中的locale;
*/
char *Locate_Language_read(void); 

/**
 * @brief 队列写入语言标识
 * @param current_locate_language:语言标识，e.g.中文简体："zh-cn"，详细可参考void Change_Language_From_Settings(lv_event_t *e)中的locale;
*/
void Locate_Language_write(char *current_locate_language); 

/**
 * @brief 手动模式开始按键触发. Handles the event triggered by the start cooking button in manual mode.
 *
 * This function is responsible for processing the event generated by the start cooking button
 * when it is pressed in manual mode. It performs a specific action related to the manual mode,
 * such as writing to the mailbox to start the manual mode process.
 *
 * @param e Pointer to the event object.
 *           - Type: lv_event_t
 *           - This parameter is not used within the function body.
 *           - Can be NULL.
 */
void MenuStartCookingButtonManual(lv_event_t * e);

/**
 * @brief 手动模式设定温度滑条变化触发. Callback function for manual target temperature slider change event.
 *
 * This function is triggered when the manual target temperature slider is changed.
 *
 * @param[in] e Pointer to the event object
 */
void ManualSetTargetTemperature(lv_event_t * e);

/**
 * @brief 手动模式设定时间滑条变化触发. Event handler for manual countdown time slider changes.
 * 
 * This function is called when the manual countdown time slider value changes.
 * It retrieves the new value from the slider and updates the countdown time accordingly.
 * If the countdown time is set to 0, it updates a label to indicate continuous operation.
 * Otherwise, it formats the countdown time in minutes and seconds and updates the label.
 * 
 * @param[in] e Pointer to the event structure.
 */
void ManualSetCountdownTime(lv_event_t * e);

/**
 * @brief 自动模式开始按键触发
 *
 * This function is triggered when the menu start cooking button is pressed in auto mode.
 *
 * @param e Pointer to the lv_event_t event object.
 */
void MenuStartCookingButtonAuto(lv_event_t * e);

/**
 * @brief 自动模式滚轮滚动触发. Handle the event triggered by scrolling the roller in the automatic mode.
 *
 * This function is called when the roller in the user interface is scrolled in the automatic mode. It performs various actions based on the current mode and countdown state.
 *
 * @param e Pointer to the event object containing information about the event.
 */
void Roller_Option_Menu_Change(lv_event_t * e);

/**
 * @brief 切换语言. Changes the language based on the selected option in the roller.
 *
 * This function is called when an language preference changing event occurs in the user interface.
 * It extracts the selected language from a roller and maps it to the corresponding ISO locale name.
 * Then, it sets the active locale using the lv_i18n API and initializes the manual and auto screens.
 *
 * @param e Pointer to the event object
 */
void Change_Language_From_Settings(lv_event_t *e);

/**
 * @brief Refreshes the text of LVGL internationalized labels.
 *
 * This function updates the text of multiple LVGL labels used for internationalization.
 * It sets the text of each label to the corresponding translated string.
 */
void refresh_lv_i18n_label_text(void);

/**
 * @brief 温度单位切换按键触发
 *
 * This function is triggered by the temperature unit change button.
 *
 * @param e Pointer to the lv_event_t type object.
 */
void Temperature_Unit_Change(lv_event_t * e);

/**
 * @brief 演示模式按键触发
 *
 * This function is triggered when the demo mode button is pressed.
 *
 * @param e Pointer to the event structure.
 *
 * @note This function determines the current use state based on the demo mode switch state and updates the use state accordingly.
 */
void DemoModeOnOFF(lv_event_t * e);

/**
 * @brief 新增菜单键触发
 *
 * This function is responsible for creating a new menu based on the provided configuration.
 *
 * @param e A pointer to the event object.
 */
void CreateNewMenu(lv_event_t * e);

/**
 * @brief 新增菜单温度滑条触发
 *
 * Creates a menu for changing the temperature. This function is called when a UI event occurs.
 *
 * @param e Pointer to the event object.
 */
void CreateMenuChangeTemperature(lv_event_t * e);

/**
 * @brief 新建菜单倒计时滑条.
 *
 * This function creates a menu countdown slider and updates a label with the selected countdown time.
 *
 * @param e Pointer to the event data.
 */
void CreateMenuSetCountdownTime(lv_event_t * e);

/**
 * @brief 删除菜单键触发. Deletes the current menu.
 *
 * @param e Pointer to the lv_event_t event.
 */
void DeleteCurrentMenu(lv_event_t * e);

/**
 * @brief 修改菜单最终确定键. Modifies the final confirmation key for the menu.
 *
 * This function is used to modify the final confirmation key for the menu.
 *
 * @param e Pointer to the `lv_event_t` object representing the event.
 */
void EditCurrentMenu(lv_event_t * e);

/**
 * @brief 修改菜单温度滑条触发. Edit the target temperature slider in the edit menu.
 *
 * This function is called when an event occurs on the target temperature slider in the edit menu.
 * It updates the displayed value on the label based on the slider's value and the current temperature unit.
 * It also updates the value of the target temperature slider itself.
 *
 * @param e Pointer to the event object.
 */
void EditMenuTargetTemperatureSlider(lv_event_t * e);

/**
 * @brief 选择要修改的菜单. Edit the current menu selection.
 *
 * This function is called when an event occurs on the user interface (UI)
 * and is responsible for updating the UI elements based on the selected menu item.
 *
 * @param e Pointer to the LVGL event object.
 */
void EditCurrentMenuSelect(lv_event_t * e);

/**
 * @brief 修改菜单倒计时滑条菜单. Sets the countdown time for editing.
 *
 * This function is called when an event is triggered.
 * It retrieves the countdown time value from a slider object and updates the countdown display label.
 *
 * @param e Pointer to the event object.
 */
void EditSetCountdownTime(lv_event_t * e);

void Screensaver_Menu_Event(lv_event_t * e);

void DropFoodReminderDone(lv_event_t * e);

void CallDropdownMotorLeftRightManual(lv_event_t * e);

void CallDropdownMotorLeftRightAuto(lv_event_t * e);

void TemperatureCalibrationSlider(lv_event_t *e);

esp_err_t lv_obj_whether_ban_animation(const lv_obj_t * obj, bool animation_will_be_ban);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
